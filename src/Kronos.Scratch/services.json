
[
  {
    "domain": "homeassistant",
    "services": {
      "check_config": {
        "description": "Check the Home Assistant configuration files for errors. Errors will be displayed in the Home Assistant log.",
        "fields": {}
      },
      "reload_core_config": {
        "description": "Reload the core configuration.",
        "fields": {}
      },
      "restart": {
        "description": "Restart the Home Assistant service.",
        "fields": {}
      },
      "set_location": {
        "description": "",
        "fields": {}
      },
      "stop": {
        "description": "Stop the Home Assistant service.",
        "fields": {}
      },
      "toggle": {
        "description": "Generic service to toggle devices on/off under any domain. Same usage as the light.turn_on, switch.turn_on, etc. services.",
        "fields": {
          "entity_id": {
            "description": "The entity_id of the device to toggle on/off.",
            "example": "light.living_room"
          }
        }
      },
      "turn_off": {
        "description": "Generic service to turn devices off under any domain. Same usage as the light.turn_on, switch.turn_on, etc. services.",
        "fields": {
          "entity_id": {
            "description": "The entity_id of the device to turn off.",
            "example": "light.living_room"
          }
        }
      },
      "turn_on": {
        "description": "Generic service to turn devices on under any domain. Same usage as the light.turn_on, switch.turn_on, etc. services.",
        "fields": {
          "entity_id": {
            "description": "The entity_id of the device to turn on.",
            "example": "light.living_room"
          }
        }
      },
      "update_entity": {
        "description": "Force one or more entities to update its data",
        "fields": {
          "entity_id": {
            "description": "One or multiple entity_ids to update. Can be a list.",
            "example": "light.living_room"
          }
        }
      }
    }
  },
  {
    "domain": "persistent_notification",
    "services": {
      "create": {
        "description": "Show a notification in the frontend.",
        "fields": {
          "message": {
            "description": "Message body of the notification. [Templates accepted]",
            "example": "Please check your configuration.yaml."
          },
          "notification_id": {
            "description": "Target ID of the notification, will replace a notification with the same Id. [Optional]",
            "example": 1234
          },
          "title": {
            "description": "Optional title for your notification. [Optional, Templates accepted]",
            "example": "Test notification"
          }
        }
      },
      "dismiss": {
        "description": "Remove a notification from the frontend.",
        "fields": {
          "notification_id": {
            "description": "Target ID of the notification, which should be removed. [Required]",
            "example": 1234
          }
        }
      },
      "mark_read": {
        "description": "Mark a notification read.",
        "fields": {
          "notification_id": {
            "description": "Target ID of the notification, which should be mark read. [Required]",
            "example": 1234
          }
        }
      }
    }
  },
  {
    "domain": "system_log",
    "services": {
      "clear": {
        "description": "Clear all log entries.",
        "fields": {}
      },
      "write": {
        "description": "Write log entry.",
        "fields": {
          "level": {
            "description": "Log level: debug, info, warning, error, critical. Defaults to 'error'.",
            "example": "debug"
          },
          "logger": {
            "description": "Logger name under which to log the message. Defaults to 'system_log.external'.",
            "example": "mycomponent.myplatform"
          },
          "message": {
            "description": "Message to log. [Required]",
            "example": "Something went wrong"
          }
        }
      }
    }
  },
  {
    "domain": "recorder",
    "services": {
      "purge": {
        "description": "Start purge task - delete events and states older than x days, according to keep_days service data.",
        "fields": {
          "keep_days": {
            "description": "Number of history days to keep in database after purge. Value >= 0.",
            "example": 2
          },
          "repack": {
            "description": "Attempt to save disk space by rewriting the entire database file.",
            "example": true
          }
        }
      }
    }
  },
  {
    "domain": "input_number",
    "services": {
      "decrement": {
        "description": "Decrement the value of an input number entity by its stepping.",
        "fields": {
          "entity_id": {
            "description": "Entity id of the input number the should be decremented.",
            "example": "input_number.threshold"
          }
        }
      },
      "increment": {
        "description": "Increment the value of an input number entity by its stepping.",
        "fields": {
          "entity_id": {
            "description": "Entity id of the input number the should be incremented.",
            "example": "input_number.threshold"
          }
        }
      },
      "set_value": {
        "description": "Set the value of an input number entity.",
        "fields": {
          "entity_id": {
            "description": "Entity id of the input number to set the new value.",
            "example": "input_number.threshold"
          },
          "value": {
            "description": "The target value the entity should be set to.",
            "example": 42
          }
        }
      }
    }
  },
  {
    "domain": "group",
    "services": {
      "reload": {
        "description": "Reload group configuration.",
        "fields": {}
      },
      "remove": {
        "description": "Remove a user group.",
        "fields": {
          "object_id": {
            "description": "Group id and part of entity id.",
            "example": "test_group"
          }
        }
      },
      "set": {
        "description": "Create/Update a user group.",
        "fields": {
          "add_entities": {
            "description": "List of members they will change on group listening.",
            "example": "domain.entity_id1, domain.entity_id2"
          },
          "all": {
            "description": "Enable this option if the group should only turn on when all entities are on.",
            "example": true
          },
          "control": {
            "description": "Value for control the group control.",
            "example": "hidden"
          },
          "entities": {
            "description": "List of all members in the group. Not compatible with 'delta'.",
            "example": "domain.entity_id1, domain.entity_id2"
          },
          "icon": {
            "description": "Name of icon for the group.",
            "example": "mdi:camera"
          },
          "name": {
            "description": "Name of group",
            "example": "My test group"
          },
          "object_id": {
            "description": "Group id and part of entity id.",
            "example": "test_group"
          },
          "view": {
            "description": "Boolean for if the group is a view.",
            "example": true
          },
          "visible": {
            "description": "If the group is visible on UI.",
            "example": true
          }
        }
      },
      "set_visibility": {
        "description": "Hide or show a group.",
        "fields": {
          "entity_id": {
            "description": "Name(s) of entities to set value.",
            "example": "group.travel"
          },
          "visible": {
            "description": "True if group should be shown or False if it should be hidden.",
            "example": true
          }
        }
      }
    }
  },
  {
    "domain": "script",
    "services": {
      "reload": {
        "description": "Reload all the available scripts",
        "fields": {}
      },
      "toggle": {
        "description": "Toggle script",
        "fields": {
          "entity_id": {
            "description": "Name(s) of script to be toggled.",
            "example": "script.arrive_home"
          }
        }
      },
      "turn_off": {
        "description": "Turn off script",
        "fields": {
          "entity_id": {
            "description": "Name(s) of script to be turned off.",
            "example": "script.arrive_home"
          }
        }
      },
      "turn_on": {
        "description": "Turn on script",
        "fields": {
          "entity_id": {
            "description": "Name(s) of script to be turned on.",
            "example": "script.arrive_home"
          }
        }
      }
    }
  },
  {
    "domain": "automation",
    "services": {
      "reload": {
        "description": "Reload the automation configuration.",
        "fields": {}
      },
      "toggle": {
        "description": "Toggle an automation.",
        "fields": {
          "entity_id": {
            "description": "Name of the automation to toggle on/off.",
            "example": "automation.notify_home"
          }
        }
      },
      "trigger": {
        "description": "Trigger the action of an automation.",
        "fields": {
          "entity_id": {
            "description": "Name of the automation to trigger.",
            "example": "automation.notify_home"
          }
        }
      },
      "turn_off": {
        "description": "Disable an automation.",
        "fields": {
          "entity_id": {
            "description": "Name of the automation to turn off.",
            "example": "automation.notify_home"
          }
        }
      },
      "turn_on": {
        "description": "Enable an automation.",
        "fields": {
          "entity_id": {
            "description": "Name of the automation to turn on.",
            "example": "automation.notify_home"
          }
        }
      }
    }
  },
  {
    "domain": "tts",
    "services": {
      "clear_cache": {
        "description": "Remove cache files and RAM cache.",
        "fields": {}
      },
      "google_translate_say": {
        "description": "",
        "fields": {}
      }
    }
  },
  {
    "domain": "switch",
    "services": {
      "toggle": {
        "description": "Toggles a switch state.",
        "fields": {
          "entity_id": {
            "description": "Name(s) of entities to toggle.",
            "example": "switch.living_room"
          }
        }
      },
      "turn_off": {
        "description": "Turn a switch off.",
        "fields": {
          "entity_id": {
            "description": "Name(s) of entities to turn off.",
            "example": "switch.living_room"
          }
        }
      },
      "turn_on": {
        "description": "Turn a switch on.",
        "fields": {
          "entity_id": {
            "description": "Name(s) of entities to turn on",
            "example": "switch.living_room"
          }
        }
      }
    }
  },
  {
    "domain": "logbook",
    "services": {
      "log": {
        "description": "",
        "fields": {}
      }
    }
  },
  {
    "domain": "notify",
    "services": {
      "mobile_app_dan_s_sm_g973f": {
        "description": "",
        "fields": {}
      },
      "notify": {
        "description": "Send a notification.",
        "fields": {
          "data": {
            "description": "Extended information for notification. Optional depending on the platform.",
            "example": "platform specific"
          },
          "message": {
            "description": "Message body of the notification.",
            "example": "The garage door has been open for 10 minutes."
          },
          "target": {
            "description": "An array of targets to send the notification to. Optional depending on the platform.",
            "example": "platform specific"
          },
          "title": {
            "description": "Optional title for your notification.",
            "example": "Your Garage Door Friend"
          }
        }
      }
    }
  },
  {
    "domain": "cloud",
    "services": {
      "remote_connect": {
        "description": "Make instance UI available outside over NabuCasa cloud.",
        "fields": {}
      },
      "remote_disconnect": {
        "description": "Disconnect UI from NabuCasa cloud.",
        "fields": {}
      }
    }
  },
  {
    "domain": "device_tracker",
    "services": {
      "see": {
        "description": "Control tracked device.",
        "fields": {
          "battery": {
            "description": "Battery level of device.",
            "example": "100"
          },
          "dev_id": {
            "description": "Id of device (find id in known_devices.yaml).",
            "example": "phonedave"
          },
          "gps": {
            "description": "GPS coordinates where device is located (latitude, longitude).",
            "example": "[51.509802, -0.086692]"
          },
          "gps_accuracy": {
            "description": "Accuracy of GPS coordinates.",
            "example": "80"
          },
          "host_name": {
            "description": "Hostname of device",
            "example": "Dave"
          },
          "location_name": {
            "description": "Name of location where device is located (not_home is away).",
            "example": "home"
          },
          "mac": {
            "description": "MAC address of device",
            "example": "FF:FF:FF:FF:FF:FF"
          }
        }
      }
    }
  },
  {
    "domain": "stream",
    "services": {
      "record": {
        "description": "",
        "fields": {}
      }
    }
  },
  {
    "domain": "hacs",
    "services": {
      "install": {
        "description": "This is NOT intended to be used here, this is intended for developers!",
        "fields": {
          "repository": {
            "description": "The repository ID",
            "example": "\"123456789\""
          }
        }
      },
      "load": {
        "description": "",
        "fields": {}
      },
      "register": {
        "description": "This is NOT intended to be used here, this is intended for developers!",
        "fields": {
          "repository": {
            "description": "The full name of the repository",
            "example": "developer/repo"
          },
          "repository_type": {
            "description": "The repository type",
            "example": "plugin"
          }
        }
      }
    }
  }
]
